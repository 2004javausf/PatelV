4 Pillars of OOP
	Inheritance
		When a programming language allows for a hierarchy of objects.
		Child objects obtain states and behaviors from parent objects.
		Multiple inheritance??? NO! (Kind a yes with interfaces).
		**Diamond Problem**
	Encapsulation
		When you wrap and protect data fields, preventing manipulation outside of class.
		Usually require getter and setter methods to change these values.
		Conceal internal state of object. Preserving integrity.
	Polymorphism
		The ability for the programming language to be able to tell the difference between 
	objects and methods of the same names with different variable/class type.
		Overriding - same name, same parameters, different behavior.
		Overloading - same name, different parameters, different behavior.
		Yes, many forms - :/
		Multiple "is-a" relationships
		Object>Animal>Cat
			Animal Is-a Animal, and also an Object.
			Cat Is-a Cat, Animal and Object.
		Covariance 
	Abstraction
		Sometimes Omitted from Pillars of OOP
		Hiding the implementation details.
		"What it does, Not how it does it"
		Exposing only functionality
		Abstract Class - abstract methods have no implementation
		
Constructor
	How we instantiate an object.
	No return type but does return that object that it created.
	Constructor with no arguments calls Super().
	
Code Block
	Things between {}
	Instance Code Block
		{System.out.println();}
	Static Code Block
		static {System.out.println();}


	 
		